local a={["and"]=true,["break"]=true,["do"]=true,["else"]=true,["elseif"]=true,["end"]=true,["false"]=true,["for"]=true,["function"]=true,["if"]=true,["in"]=true,["local"]=true,["nil"]=true,["not"]=true,["or"]=true,["repeat"]=true,["return"]=true,["then"]=true,["true"]=true,["until"]=true,["while"]=true}local b;do local c={[tostring(1/0)]="1/0",[tostring(-1/0)]="-1/0",[tostring(0/0)]="0/0"}number_to_string=function(d)local e=tostring(d)return c[e]or e end;b=function(d)local e=string.format("%.17g",d)return c[e]or e end end;local function f(c,g,h)local i=type(c)if i=="table"then if not h[c]then h[c]=true;g("{")local j=0;for k,l in ipairs(c)do if k>1 then g(",")end;f(l,g,h)j=k end;j=j+1;local m=j>1;for n,l in pairs(c)do local o=type(n)if o=="string"then if m then g(",")end;m=true;if not a[n]and string.match(n,"^[%a_][%a%d_]*$")then g(n)g("=")else g(string.format("[%q]=",n))end;f(l,g,h)else if o~="number"or n>=j or n<1 or n%1~=0 then if m then g(",")end;m=true;g("[")f(n,g,h)g("]=")f(l,g,h)end end end;g("}")h[c]=nil else g('"table (recursive)"')end elseif i=="number"then g(b(c))elseif i=="boolean"then g(tostring(c))elseif c==nil then g("nil")else g(string.format("%q",tostring(c)))end end;tstr_cat=function(g,c)f(c,g,{})end;tstr=function(c)local p={}local g=function(l)p[#p+1]=l end;f(c,g,{})return table.concat(p)end
